
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Transportadora
 * 
 */
export type Transportadora = $Result.DefaultSelection<Prisma.$TransportadoraPayload>
/**
 * Model Documento
 * 
 */
export type Documento = $Result.DefaultSelection<Prisma.$DocumentoPayload>
/**
 * Model RegistroDocumento
 * 
 */
export type RegistroDocumento = $Result.DefaultSelection<Prisma.$RegistroDocumentoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Transportadoras
 * const transportadoras = await prisma.transportadora.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Transportadoras
   * const transportadoras = await prisma.transportadora.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.transportadora`: Exposes CRUD operations for the **Transportadora** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transportadoras
    * const transportadoras = await prisma.transportadora.findMany()
    * ```
    */
  get transportadora(): Prisma.TransportadoraDelegate<ExtArgs>;

  /**
   * `prisma.documento`: Exposes CRUD operations for the **Documento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documentos
    * const documentos = await prisma.documento.findMany()
    * ```
    */
  get documento(): Prisma.DocumentoDelegate<ExtArgs>;

  /**
   * `prisma.registroDocumento`: Exposes CRUD operations for the **RegistroDocumento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RegistroDocumentos
    * const registroDocumentos = await prisma.registroDocumento.findMany()
    * ```
    */
  get registroDocumento(): Prisma.RegistroDocumentoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Transportadora: 'Transportadora',
    Documento: 'Documento',
    RegistroDocumento: 'RegistroDocumento'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "transportadora" | "documento" | "registroDocumento"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Transportadora: {
        payload: Prisma.$TransportadoraPayload<ExtArgs>
        fields: Prisma.TransportadoraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransportadoraFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportadoraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransportadoraFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportadoraPayload>
          }
          findFirst: {
            args: Prisma.TransportadoraFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportadoraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransportadoraFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportadoraPayload>
          }
          findMany: {
            args: Prisma.TransportadoraFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportadoraPayload>[]
          }
          create: {
            args: Prisma.TransportadoraCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportadoraPayload>
          }
          createMany: {
            args: Prisma.TransportadoraCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransportadoraCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportadoraPayload>[]
          }
          delete: {
            args: Prisma.TransportadoraDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportadoraPayload>
          }
          update: {
            args: Prisma.TransportadoraUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportadoraPayload>
          }
          deleteMany: {
            args: Prisma.TransportadoraDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransportadoraUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransportadoraUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransportadoraPayload>
          }
          aggregate: {
            args: Prisma.TransportadoraAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransportadora>
          }
          groupBy: {
            args: Prisma.TransportadoraGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransportadoraGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransportadoraCountArgs<ExtArgs>
            result: $Utils.Optional<TransportadoraCountAggregateOutputType> | number
          }
        }
      }
      Documento: {
        payload: Prisma.$DocumentoPayload<ExtArgs>
        fields: Prisma.DocumentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          findFirst: {
            args: Prisma.DocumentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          findMany: {
            args: Prisma.DocumentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>[]
          }
          create: {
            args: Prisma.DocumentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          createMany: {
            args: Prisma.DocumentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>[]
          }
          delete: {
            args: Prisma.DocumentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          update: {
            args: Prisma.DocumentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          deleteMany: {
            args: Prisma.DocumentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          aggregate: {
            args: Prisma.DocumentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumento>
          }
          groupBy: {
            args: Prisma.DocumentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentoCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentoCountAggregateOutputType> | number
          }
        }
      }
      RegistroDocumento: {
        payload: Prisma.$RegistroDocumentoPayload<ExtArgs>
        fields: Prisma.RegistroDocumentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegistroDocumentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroDocumentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegistroDocumentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroDocumentoPayload>
          }
          findFirst: {
            args: Prisma.RegistroDocumentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroDocumentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegistroDocumentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroDocumentoPayload>
          }
          findMany: {
            args: Prisma.RegistroDocumentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroDocumentoPayload>[]
          }
          create: {
            args: Prisma.RegistroDocumentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroDocumentoPayload>
          }
          createMany: {
            args: Prisma.RegistroDocumentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegistroDocumentoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroDocumentoPayload>[]
          }
          delete: {
            args: Prisma.RegistroDocumentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroDocumentoPayload>
          }
          update: {
            args: Prisma.RegistroDocumentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroDocumentoPayload>
          }
          deleteMany: {
            args: Prisma.RegistroDocumentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegistroDocumentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RegistroDocumentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistroDocumentoPayload>
          }
          aggregate: {
            args: Prisma.RegistroDocumentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegistroDocumento>
          }
          groupBy: {
            args: Prisma.RegistroDocumentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegistroDocumentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegistroDocumentoCountArgs<ExtArgs>
            result: $Utils.Optional<RegistroDocumentoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TransportadoraCountOutputType
   */

  export type TransportadoraCountOutputType = {
    registros: number
  }

  export type TransportadoraCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | TransportadoraCountOutputTypeCountRegistrosArgs
  }

  // Custom InputTypes
  /**
   * TransportadoraCountOutputType without action
   */
  export type TransportadoraCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransportadoraCountOutputType
     */
    select?: TransportadoraCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransportadoraCountOutputType without action
   */
  export type TransportadoraCountOutputTypeCountRegistrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroDocumentoWhereInput
  }


  /**
   * Count Type DocumentoCountOutputType
   */

  export type DocumentoCountOutputType = {
    registros: number
  }

  export type DocumentoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | DocumentoCountOutputTypeCountRegistrosArgs
  }

  // Custom InputTypes
  /**
   * DocumentoCountOutputType without action
   */
  export type DocumentoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentoCountOutputType
     */
    select?: DocumentoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentoCountOutputType without action
   */
  export type DocumentoCountOutputTypeCountRegistrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroDocumentoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Transportadora
   */

  export type AggregateTransportadora = {
    _count: TransportadoraCountAggregateOutputType | null
    _avg: TransportadoraAvgAggregateOutputType | null
    _sum: TransportadoraSumAggregateOutputType | null
    _min: TransportadoraMinAggregateOutputType | null
    _max: TransportadoraMaxAggregateOutputType | null
  }

  export type TransportadoraAvgAggregateOutputType = {
    id: number | null
  }

  export type TransportadoraSumAggregateOutputType = {
    id: number | null
  }

  export type TransportadoraMinAggregateOutputType = {
    id: number | null
    razaoSocial: string | null
    cnpj: string | null
    uf: string | null
    quimicosControlados: boolean | null
    disponivelParaFrete: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransportadoraMaxAggregateOutputType = {
    id: number | null
    razaoSocial: string | null
    cnpj: string | null
    uf: string | null
    quimicosControlados: boolean | null
    disponivelParaFrete: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransportadoraCountAggregateOutputType = {
    id: number
    razaoSocial: number
    cnpj: number
    uf: number
    quimicosControlados: number
    disponivelParaFrete: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransportadoraAvgAggregateInputType = {
    id?: true
  }

  export type TransportadoraSumAggregateInputType = {
    id?: true
  }

  export type TransportadoraMinAggregateInputType = {
    id?: true
    razaoSocial?: true
    cnpj?: true
    uf?: true
    quimicosControlados?: true
    disponivelParaFrete?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransportadoraMaxAggregateInputType = {
    id?: true
    razaoSocial?: true
    cnpj?: true
    uf?: true
    quimicosControlados?: true
    disponivelParaFrete?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransportadoraCountAggregateInputType = {
    id?: true
    razaoSocial?: true
    cnpj?: true
    uf?: true
    quimicosControlados?: true
    disponivelParaFrete?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransportadoraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transportadora to aggregate.
     */
    where?: TransportadoraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transportadoras to fetch.
     */
    orderBy?: TransportadoraOrderByWithRelationInput | TransportadoraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransportadoraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transportadoras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transportadoras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transportadoras
    **/
    _count?: true | TransportadoraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransportadoraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransportadoraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransportadoraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransportadoraMaxAggregateInputType
  }

  export type GetTransportadoraAggregateType<T extends TransportadoraAggregateArgs> = {
        [P in keyof T & keyof AggregateTransportadora]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransportadora[P]>
      : GetScalarType<T[P], AggregateTransportadora[P]>
  }




  export type TransportadoraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransportadoraWhereInput
    orderBy?: TransportadoraOrderByWithAggregationInput | TransportadoraOrderByWithAggregationInput[]
    by: TransportadoraScalarFieldEnum[] | TransportadoraScalarFieldEnum
    having?: TransportadoraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransportadoraCountAggregateInputType | true
    _avg?: TransportadoraAvgAggregateInputType
    _sum?: TransportadoraSumAggregateInputType
    _min?: TransportadoraMinAggregateInputType
    _max?: TransportadoraMaxAggregateInputType
  }

  export type TransportadoraGroupByOutputType = {
    id: number
    razaoSocial: string
    cnpj: string
    uf: string
    quimicosControlados: boolean
    disponivelParaFrete: boolean
    createdAt: Date
    updatedAt: Date
    _count: TransportadoraCountAggregateOutputType | null
    _avg: TransportadoraAvgAggregateOutputType | null
    _sum: TransportadoraSumAggregateOutputType | null
    _min: TransportadoraMinAggregateOutputType | null
    _max: TransportadoraMaxAggregateOutputType | null
  }

  type GetTransportadoraGroupByPayload<T extends TransportadoraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransportadoraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransportadoraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransportadoraGroupByOutputType[P]>
            : GetScalarType<T[P], TransportadoraGroupByOutputType[P]>
        }
      >
    >


  export type TransportadoraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    razaoSocial?: boolean
    cnpj?: boolean
    uf?: boolean
    quimicosControlados?: boolean
    disponivelParaFrete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registros?: boolean | Transportadora$registrosArgs<ExtArgs>
    _count?: boolean | TransportadoraCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transportadora"]>

  export type TransportadoraSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    razaoSocial?: boolean
    cnpj?: boolean
    uf?: boolean
    quimicosControlados?: boolean
    disponivelParaFrete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["transportadora"]>

  export type TransportadoraSelectScalar = {
    id?: boolean
    razaoSocial?: boolean
    cnpj?: boolean
    uf?: boolean
    quimicosControlados?: boolean
    disponivelParaFrete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransportadoraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | Transportadora$registrosArgs<ExtArgs>
    _count?: boolean | TransportadoraCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TransportadoraIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TransportadoraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transportadora"
    objects: {
      registros: Prisma.$RegistroDocumentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      razaoSocial: string
      cnpj: string
      uf: string
      quimicosControlados: boolean
      disponivelParaFrete: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transportadora"]>
    composites: {}
  }

  type TransportadoraGetPayload<S extends boolean | null | undefined | TransportadoraDefaultArgs> = $Result.GetResult<Prisma.$TransportadoraPayload, S>

  type TransportadoraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransportadoraFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransportadoraCountAggregateInputType | true
    }

  export interface TransportadoraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transportadora'], meta: { name: 'Transportadora' } }
    /**
     * Find zero or one Transportadora that matches the filter.
     * @param {TransportadoraFindUniqueArgs} args - Arguments to find a Transportadora
     * @example
     * // Get one Transportadora
     * const transportadora = await prisma.transportadora.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransportadoraFindUniqueArgs>(args: SelectSubset<T, TransportadoraFindUniqueArgs<ExtArgs>>): Prisma__TransportadoraClient<$Result.GetResult<Prisma.$TransportadoraPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transportadora that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransportadoraFindUniqueOrThrowArgs} args - Arguments to find a Transportadora
     * @example
     * // Get one Transportadora
     * const transportadora = await prisma.transportadora.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransportadoraFindUniqueOrThrowArgs>(args: SelectSubset<T, TransportadoraFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransportadoraClient<$Result.GetResult<Prisma.$TransportadoraPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transportadora that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportadoraFindFirstArgs} args - Arguments to find a Transportadora
     * @example
     * // Get one Transportadora
     * const transportadora = await prisma.transportadora.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransportadoraFindFirstArgs>(args?: SelectSubset<T, TransportadoraFindFirstArgs<ExtArgs>>): Prisma__TransportadoraClient<$Result.GetResult<Prisma.$TransportadoraPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transportadora that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportadoraFindFirstOrThrowArgs} args - Arguments to find a Transportadora
     * @example
     * // Get one Transportadora
     * const transportadora = await prisma.transportadora.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransportadoraFindFirstOrThrowArgs>(args?: SelectSubset<T, TransportadoraFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransportadoraClient<$Result.GetResult<Prisma.$TransportadoraPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transportadoras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportadoraFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transportadoras
     * const transportadoras = await prisma.transportadora.findMany()
     * 
     * // Get first 10 Transportadoras
     * const transportadoras = await prisma.transportadora.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transportadoraWithIdOnly = await prisma.transportadora.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransportadoraFindManyArgs>(args?: SelectSubset<T, TransportadoraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportadoraPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transportadora.
     * @param {TransportadoraCreateArgs} args - Arguments to create a Transportadora.
     * @example
     * // Create one Transportadora
     * const Transportadora = await prisma.transportadora.create({
     *   data: {
     *     // ... data to create a Transportadora
     *   }
     * })
     * 
     */
    create<T extends TransportadoraCreateArgs>(args: SelectSubset<T, TransportadoraCreateArgs<ExtArgs>>): Prisma__TransportadoraClient<$Result.GetResult<Prisma.$TransportadoraPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transportadoras.
     * @param {TransportadoraCreateManyArgs} args - Arguments to create many Transportadoras.
     * @example
     * // Create many Transportadoras
     * const transportadora = await prisma.transportadora.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransportadoraCreateManyArgs>(args?: SelectSubset<T, TransportadoraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transportadoras and returns the data saved in the database.
     * @param {TransportadoraCreateManyAndReturnArgs} args - Arguments to create many Transportadoras.
     * @example
     * // Create many Transportadoras
     * const transportadora = await prisma.transportadora.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transportadoras and only return the `id`
     * const transportadoraWithIdOnly = await prisma.transportadora.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransportadoraCreateManyAndReturnArgs>(args?: SelectSubset<T, TransportadoraCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransportadoraPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transportadora.
     * @param {TransportadoraDeleteArgs} args - Arguments to delete one Transportadora.
     * @example
     * // Delete one Transportadora
     * const Transportadora = await prisma.transportadora.delete({
     *   where: {
     *     // ... filter to delete one Transportadora
     *   }
     * })
     * 
     */
    delete<T extends TransportadoraDeleteArgs>(args: SelectSubset<T, TransportadoraDeleteArgs<ExtArgs>>): Prisma__TransportadoraClient<$Result.GetResult<Prisma.$TransportadoraPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transportadora.
     * @param {TransportadoraUpdateArgs} args - Arguments to update one Transportadora.
     * @example
     * // Update one Transportadora
     * const transportadora = await prisma.transportadora.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransportadoraUpdateArgs>(args: SelectSubset<T, TransportadoraUpdateArgs<ExtArgs>>): Prisma__TransportadoraClient<$Result.GetResult<Prisma.$TransportadoraPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transportadoras.
     * @param {TransportadoraDeleteManyArgs} args - Arguments to filter Transportadoras to delete.
     * @example
     * // Delete a few Transportadoras
     * const { count } = await prisma.transportadora.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransportadoraDeleteManyArgs>(args?: SelectSubset<T, TransportadoraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transportadoras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportadoraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transportadoras
     * const transportadora = await prisma.transportadora.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransportadoraUpdateManyArgs>(args: SelectSubset<T, TransportadoraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transportadora.
     * @param {TransportadoraUpsertArgs} args - Arguments to update or create a Transportadora.
     * @example
     * // Update or create a Transportadora
     * const transportadora = await prisma.transportadora.upsert({
     *   create: {
     *     // ... data to create a Transportadora
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transportadora we want to update
     *   }
     * })
     */
    upsert<T extends TransportadoraUpsertArgs>(args: SelectSubset<T, TransportadoraUpsertArgs<ExtArgs>>): Prisma__TransportadoraClient<$Result.GetResult<Prisma.$TransportadoraPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transportadoras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportadoraCountArgs} args - Arguments to filter Transportadoras to count.
     * @example
     * // Count the number of Transportadoras
     * const count = await prisma.transportadora.count({
     *   where: {
     *     // ... the filter for the Transportadoras we want to count
     *   }
     * })
    **/
    count<T extends TransportadoraCountArgs>(
      args?: Subset<T, TransportadoraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransportadoraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transportadora.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportadoraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransportadoraAggregateArgs>(args: Subset<T, TransportadoraAggregateArgs>): Prisma.PrismaPromise<GetTransportadoraAggregateType<T>>

    /**
     * Group by Transportadora.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransportadoraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransportadoraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransportadoraGroupByArgs['orderBy'] }
        : { orderBy?: TransportadoraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransportadoraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransportadoraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transportadora model
   */
  readonly fields: TransportadoraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transportadora.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransportadoraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registros<T extends Transportadora$registrosArgs<ExtArgs> = {}>(args?: Subset<T, Transportadora$registrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroDocumentoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transportadora model
   */ 
  interface TransportadoraFieldRefs {
    readonly id: FieldRef<"Transportadora", 'Int'>
    readonly razaoSocial: FieldRef<"Transportadora", 'String'>
    readonly cnpj: FieldRef<"Transportadora", 'String'>
    readonly uf: FieldRef<"Transportadora", 'String'>
    readonly quimicosControlados: FieldRef<"Transportadora", 'Boolean'>
    readonly disponivelParaFrete: FieldRef<"Transportadora", 'Boolean'>
    readonly createdAt: FieldRef<"Transportadora", 'DateTime'>
    readonly updatedAt: FieldRef<"Transportadora", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transportadora findUnique
   */
  export type TransportadoraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportadora
     */
    select?: TransportadoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportadoraInclude<ExtArgs> | null
    /**
     * Filter, which Transportadora to fetch.
     */
    where: TransportadoraWhereUniqueInput
  }

  /**
   * Transportadora findUniqueOrThrow
   */
  export type TransportadoraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportadora
     */
    select?: TransportadoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportadoraInclude<ExtArgs> | null
    /**
     * Filter, which Transportadora to fetch.
     */
    where: TransportadoraWhereUniqueInput
  }

  /**
   * Transportadora findFirst
   */
  export type TransportadoraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportadora
     */
    select?: TransportadoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportadoraInclude<ExtArgs> | null
    /**
     * Filter, which Transportadora to fetch.
     */
    where?: TransportadoraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transportadoras to fetch.
     */
    orderBy?: TransportadoraOrderByWithRelationInput | TransportadoraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transportadoras.
     */
    cursor?: TransportadoraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transportadoras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transportadoras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transportadoras.
     */
    distinct?: TransportadoraScalarFieldEnum | TransportadoraScalarFieldEnum[]
  }

  /**
   * Transportadora findFirstOrThrow
   */
  export type TransportadoraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportadora
     */
    select?: TransportadoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportadoraInclude<ExtArgs> | null
    /**
     * Filter, which Transportadora to fetch.
     */
    where?: TransportadoraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transportadoras to fetch.
     */
    orderBy?: TransportadoraOrderByWithRelationInput | TransportadoraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transportadoras.
     */
    cursor?: TransportadoraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transportadoras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transportadoras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transportadoras.
     */
    distinct?: TransportadoraScalarFieldEnum | TransportadoraScalarFieldEnum[]
  }

  /**
   * Transportadora findMany
   */
  export type TransportadoraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportadora
     */
    select?: TransportadoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportadoraInclude<ExtArgs> | null
    /**
     * Filter, which Transportadoras to fetch.
     */
    where?: TransportadoraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transportadoras to fetch.
     */
    orderBy?: TransportadoraOrderByWithRelationInput | TransportadoraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transportadoras.
     */
    cursor?: TransportadoraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transportadoras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transportadoras.
     */
    skip?: number
    distinct?: TransportadoraScalarFieldEnum | TransportadoraScalarFieldEnum[]
  }

  /**
   * Transportadora create
   */
  export type TransportadoraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportadora
     */
    select?: TransportadoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportadoraInclude<ExtArgs> | null
    /**
     * The data needed to create a Transportadora.
     */
    data: XOR<TransportadoraCreateInput, TransportadoraUncheckedCreateInput>
  }

  /**
   * Transportadora createMany
   */
  export type TransportadoraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transportadoras.
     */
    data: TransportadoraCreateManyInput | TransportadoraCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transportadora createManyAndReturn
   */
  export type TransportadoraCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportadora
     */
    select?: TransportadoraSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Transportadoras.
     */
    data: TransportadoraCreateManyInput | TransportadoraCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transportadora update
   */
  export type TransportadoraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportadora
     */
    select?: TransportadoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportadoraInclude<ExtArgs> | null
    /**
     * The data needed to update a Transportadora.
     */
    data: XOR<TransportadoraUpdateInput, TransportadoraUncheckedUpdateInput>
    /**
     * Choose, which Transportadora to update.
     */
    where: TransportadoraWhereUniqueInput
  }

  /**
   * Transportadora updateMany
   */
  export type TransportadoraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transportadoras.
     */
    data: XOR<TransportadoraUpdateManyMutationInput, TransportadoraUncheckedUpdateManyInput>
    /**
     * Filter which Transportadoras to update
     */
    where?: TransportadoraWhereInput
  }

  /**
   * Transportadora upsert
   */
  export type TransportadoraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportadora
     */
    select?: TransportadoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportadoraInclude<ExtArgs> | null
    /**
     * The filter to search for the Transportadora to update in case it exists.
     */
    where: TransportadoraWhereUniqueInput
    /**
     * In case the Transportadora found by the `where` argument doesn't exist, create a new Transportadora with this data.
     */
    create: XOR<TransportadoraCreateInput, TransportadoraUncheckedCreateInput>
    /**
     * In case the Transportadora was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransportadoraUpdateInput, TransportadoraUncheckedUpdateInput>
  }

  /**
   * Transportadora delete
   */
  export type TransportadoraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportadora
     */
    select?: TransportadoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportadoraInclude<ExtArgs> | null
    /**
     * Filter which Transportadora to delete.
     */
    where: TransportadoraWhereUniqueInput
  }

  /**
   * Transportadora deleteMany
   */
  export type TransportadoraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transportadoras to delete
     */
    where?: TransportadoraWhereInput
  }

  /**
   * Transportadora.registros
   */
  export type Transportadora$registrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoInclude<ExtArgs> | null
    where?: RegistroDocumentoWhereInput
    orderBy?: RegistroDocumentoOrderByWithRelationInput | RegistroDocumentoOrderByWithRelationInput[]
    cursor?: RegistroDocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroDocumentoScalarFieldEnum | RegistroDocumentoScalarFieldEnum[]
  }

  /**
   * Transportadora without action
   */
  export type TransportadoraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transportadora
     */
    select?: TransportadoraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransportadoraInclude<ExtArgs> | null
  }


  /**
   * Model Documento
   */

  export type AggregateDocumento = {
    _count: DocumentoCountAggregateOutputType | null
    _avg: DocumentoAvgAggregateOutputType | null
    _sum: DocumentoSumAggregateOutputType | null
    _min: DocumentoMinAggregateOutputType | null
    _max: DocumentoMaxAggregateOutputType | null
  }

  export type DocumentoAvgAggregateOutputType = {
    id: number | null
  }

  export type DocumentoSumAggregateOutputType = {
    id: number | null
  }

  export type DocumentoMinAggregateOutputType = {
    id: number | null
    codigo: string | null
    nome: string | null
    obgQuimicos: boolean | null
    obgNaoQuimicos: boolean | null
  }

  export type DocumentoMaxAggregateOutputType = {
    id: number | null
    codigo: string | null
    nome: string | null
    obgQuimicos: boolean | null
    obgNaoQuimicos: boolean | null
  }

  export type DocumentoCountAggregateOutputType = {
    id: number
    codigo: number
    nome: number
    obgQuimicos: number
    obgNaoQuimicos: number
    _all: number
  }


  export type DocumentoAvgAggregateInputType = {
    id?: true
  }

  export type DocumentoSumAggregateInputType = {
    id?: true
  }

  export type DocumentoMinAggregateInputType = {
    id?: true
    codigo?: true
    nome?: true
    obgQuimicos?: true
    obgNaoQuimicos?: true
  }

  export type DocumentoMaxAggregateInputType = {
    id?: true
    codigo?: true
    nome?: true
    obgQuimicos?: true
    obgNaoQuimicos?: true
  }

  export type DocumentoCountAggregateInputType = {
    id?: true
    codigo?: true
    nome?: true
    obgQuimicos?: true
    obgNaoQuimicos?: true
    _all?: true
  }

  export type DocumentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documento to aggregate.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documentos
    **/
    _count?: true | DocumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentoMaxAggregateInputType
  }

  export type GetDocumentoAggregateType<T extends DocumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumento[P]>
      : GetScalarType<T[P], AggregateDocumento[P]>
  }




  export type DocumentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentoWhereInput
    orderBy?: DocumentoOrderByWithAggregationInput | DocumentoOrderByWithAggregationInput[]
    by: DocumentoScalarFieldEnum[] | DocumentoScalarFieldEnum
    having?: DocumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentoCountAggregateInputType | true
    _avg?: DocumentoAvgAggregateInputType
    _sum?: DocumentoSumAggregateInputType
    _min?: DocumentoMinAggregateInputType
    _max?: DocumentoMaxAggregateInputType
  }

  export type DocumentoGroupByOutputType = {
    id: number
    codigo: string
    nome: string
    obgQuimicos: boolean
    obgNaoQuimicos: boolean
    _count: DocumentoCountAggregateOutputType | null
    _avg: DocumentoAvgAggregateOutputType | null
    _sum: DocumentoSumAggregateOutputType | null
    _min: DocumentoMinAggregateOutputType | null
    _max: DocumentoMaxAggregateOutputType | null
  }

  type GetDocumentoGroupByPayload<T extends DocumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentoGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentoGroupByOutputType[P]>
        }
      >
    >


  export type DocumentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    codigo?: boolean
    nome?: boolean
    obgQuimicos?: boolean
    obgNaoQuimicos?: boolean
    registros?: boolean | Documento$registrosArgs<ExtArgs>
    _count?: boolean | DocumentoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documento"]>

  export type DocumentoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    codigo?: boolean
    nome?: boolean
    obgQuimicos?: boolean
    obgNaoQuimicos?: boolean
  }, ExtArgs["result"]["documento"]>

  export type DocumentoSelectScalar = {
    id?: boolean
    codigo?: boolean
    nome?: boolean
    obgQuimicos?: boolean
    obgNaoQuimicos?: boolean
  }

  export type DocumentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registros?: boolean | Documento$registrosArgs<ExtArgs>
    _count?: boolean | DocumentoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DocumentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Documento"
    objects: {
      registros: Prisma.$RegistroDocumentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      codigo: string
      nome: string
      obgQuimicos: boolean
      obgNaoQuimicos: boolean
    }, ExtArgs["result"]["documento"]>
    composites: {}
  }

  type DocumentoGetPayload<S extends boolean | null | undefined | DocumentoDefaultArgs> = $Result.GetResult<Prisma.$DocumentoPayload, S>

  type DocumentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentoCountAggregateInputType | true
    }

  export interface DocumentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Documento'], meta: { name: 'Documento' } }
    /**
     * Find zero or one Documento that matches the filter.
     * @param {DocumentoFindUniqueArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentoFindUniqueArgs>(args: SelectSubset<T, DocumentoFindUniqueArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Documento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentoFindUniqueOrThrowArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentoFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Documento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindFirstArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentoFindFirstArgs>(args?: SelectSubset<T, DocumentoFindFirstArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Documento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindFirstOrThrowArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentoFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Documentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documentos
     * const documentos = await prisma.documento.findMany()
     * 
     * // Get first 10 Documentos
     * const documentos = await prisma.documento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentoWithIdOnly = await prisma.documento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentoFindManyArgs>(args?: SelectSubset<T, DocumentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Documento.
     * @param {DocumentoCreateArgs} args - Arguments to create a Documento.
     * @example
     * // Create one Documento
     * const Documento = await prisma.documento.create({
     *   data: {
     *     // ... data to create a Documento
     *   }
     * })
     * 
     */
    create<T extends DocumentoCreateArgs>(args: SelectSubset<T, DocumentoCreateArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Documentos.
     * @param {DocumentoCreateManyArgs} args - Arguments to create many Documentos.
     * @example
     * // Create many Documentos
     * const documento = await prisma.documento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentoCreateManyArgs>(args?: SelectSubset<T, DocumentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documentos and returns the data saved in the database.
     * @param {DocumentoCreateManyAndReturnArgs} args - Arguments to create many Documentos.
     * @example
     * // Create many Documentos
     * const documento = await prisma.documento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documentos and only return the `id`
     * const documentoWithIdOnly = await prisma.documento.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentoCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Documento.
     * @param {DocumentoDeleteArgs} args - Arguments to delete one Documento.
     * @example
     * // Delete one Documento
     * const Documento = await prisma.documento.delete({
     *   where: {
     *     // ... filter to delete one Documento
     *   }
     * })
     * 
     */
    delete<T extends DocumentoDeleteArgs>(args: SelectSubset<T, DocumentoDeleteArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Documento.
     * @param {DocumentoUpdateArgs} args - Arguments to update one Documento.
     * @example
     * // Update one Documento
     * const documento = await prisma.documento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentoUpdateArgs>(args: SelectSubset<T, DocumentoUpdateArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Documentos.
     * @param {DocumentoDeleteManyArgs} args - Arguments to filter Documentos to delete.
     * @example
     * // Delete a few Documentos
     * const { count } = await prisma.documento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentoDeleteManyArgs>(args?: SelectSubset<T, DocumentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documentos
     * const documento = await prisma.documento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentoUpdateManyArgs>(args: SelectSubset<T, DocumentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Documento.
     * @param {DocumentoUpsertArgs} args - Arguments to update or create a Documento.
     * @example
     * // Update or create a Documento
     * const documento = await prisma.documento.upsert({
     *   create: {
     *     // ... data to create a Documento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Documento we want to update
     *   }
     * })
     */
    upsert<T extends DocumentoUpsertArgs>(args: SelectSubset<T, DocumentoUpsertArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Documentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoCountArgs} args - Arguments to filter Documentos to count.
     * @example
     * // Count the number of Documentos
     * const count = await prisma.documento.count({
     *   where: {
     *     // ... the filter for the Documentos we want to count
     *   }
     * })
    **/
    count<T extends DocumentoCountArgs>(
      args?: Subset<T, DocumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Documento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentoAggregateArgs>(args: Subset<T, DocumentoAggregateArgs>): Prisma.PrismaPromise<GetDocumentoAggregateType<T>>

    /**
     * Group by Documento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentoGroupByArgs['orderBy'] }
        : { orderBy?: DocumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Documento model
   */
  readonly fields: DocumentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Documento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registros<T extends Documento$registrosArgs<ExtArgs> = {}>(args?: Subset<T, Documento$registrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroDocumentoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Documento model
   */ 
  interface DocumentoFieldRefs {
    readonly id: FieldRef<"Documento", 'Int'>
    readonly codigo: FieldRef<"Documento", 'String'>
    readonly nome: FieldRef<"Documento", 'String'>
    readonly obgQuimicos: FieldRef<"Documento", 'Boolean'>
    readonly obgNaoQuimicos: FieldRef<"Documento", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Documento findUnique
   */
  export type DocumentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento findUniqueOrThrow
   */
  export type DocumentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento findFirst
   */
  export type DocumentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documentos.
     */
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Documento findFirstOrThrow
   */
  export type DocumentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documentos.
     */
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Documento findMany
   */
  export type DocumentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documentos to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Documento create
   */
  export type DocumentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Documento.
     */
    data: XOR<DocumentoCreateInput, DocumentoUncheckedCreateInput>
  }

  /**
   * Documento createMany
   */
  export type DocumentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documentos.
     */
    data: DocumentoCreateManyInput | DocumentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Documento createManyAndReturn
   */
  export type DocumentoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Documentos.
     */
    data: DocumentoCreateManyInput | DocumentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Documento update
   */
  export type DocumentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Documento.
     */
    data: XOR<DocumentoUpdateInput, DocumentoUncheckedUpdateInput>
    /**
     * Choose, which Documento to update.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento updateMany
   */
  export type DocumentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documentos.
     */
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyInput>
    /**
     * Filter which Documentos to update
     */
    where?: DocumentoWhereInput
  }

  /**
   * Documento upsert
   */
  export type DocumentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Documento to update in case it exists.
     */
    where: DocumentoWhereUniqueInput
    /**
     * In case the Documento found by the `where` argument doesn't exist, create a new Documento with this data.
     */
    create: XOR<DocumentoCreateInput, DocumentoUncheckedCreateInput>
    /**
     * In case the Documento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentoUpdateInput, DocumentoUncheckedUpdateInput>
  }

  /**
   * Documento delete
   */
  export type DocumentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter which Documento to delete.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento deleteMany
   */
  export type DocumentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documentos to delete
     */
    where?: DocumentoWhereInput
  }

  /**
   * Documento.registros
   */
  export type Documento$registrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoInclude<ExtArgs> | null
    where?: RegistroDocumentoWhereInput
    orderBy?: RegistroDocumentoOrderByWithRelationInput | RegistroDocumentoOrderByWithRelationInput[]
    cursor?: RegistroDocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistroDocumentoScalarFieldEnum | RegistroDocumentoScalarFieldEnum[]
  }

  /**
   * Documento without action
   */
  export type DocumentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
  }


  /**
   * Model RegistroDocumento
   */

  export type AggregateRegistroDocumento = {
    _count: RegistroDocumentoCountAggregateOutputType | null
    _avg: RegistroDocumentoAvgAggregateOutputType | null
    _sum: RegistroDocumentoSumAggregateOutputType | null
    _min: RegistroDocumentoMinAggregateOutputType | null
    _max: RegistroDocumentoMaxAggregateOutputType | null
  }

  export type RegistroDocumentoAvgAggregateOutputType = {
    id: number | null
    transportadoraId: number | null
    documentoId: number | null
  }

  export type RegistroDocumentoSumAggregateOutputType = {
    id: number | null
    transportadoraId: number | null
    documentoId: number | null
  }

  export type RegistroDocumentoMinAggregateOutputType = {
    id: number | null
    transportadoraId: number | null
    documentoId: number | null
    validade: Date | null
    urlArquivo: string | null
    createdAt: Date | null
  }

  export type RegistroDocumentoMaxAggregateOutputType = {
    id: number | null
    transportadoraId: number | null
    documentoId: number | null
    validade: Date | null
    urlArquivo: string | null
    createdAt: Date | null
  }

  export type RegistroDocumentoCountAggregateOutputType = {
    id: number
    transportadoraId: number
    documentoId: number
    validade: number
    urlArquivo: number
    createdAt: number
    _all: number
  }


  export type RegistroDocumentoAvgAggregateInputType = {
    id?: true
    transportadoraId?: true
    documentoId?: true
  }

  export type RegistroDocumentoSumAggregateInputType = {
    id?: true
    transportadoraId?: true
    documentoId?: true
  }

  export type RegistroDocumentoMinAggregateInputType = {
    id?: true
    transportadoraId?: true
    documentoId?: true
    validade?: true
    urlArquivo?: true
    createdAt?: true
  }

  export type RegistroDocumentoMaxAggregateInputType = {
    id?: true
    transportadoraId?: true
    documentoId?: true
    validade?: true
    urlArquivo?: true
    createdAt?: true
  }

  export type RegistroDocumentoCountAggregateInputType = {
    id?: true
    transportadoraId?: true
    documentoId?: true
    validade?: true
    urlArquivo?: true
    createdAt?: true
    _all?: true
  }

  export type RegistroDocumentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegistroDocumento to aggregate.
     */
    where?: RegistroDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegistroDocumentos to fetch.
     */
    orderBy?: RegistroDocumentoOrderByWithRelationInput | RegistroDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegistroDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegistroDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegistroDocumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RegistroDocumentos
    **/
    _count?: true | RegistroDocumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegistroDocumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegistroDocumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistroDocumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistroDocumentoMaxAggregateInputType
  }

  export type GetRegistroDocumentoAggregateType<T extends RegistroDocumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistroDocumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistroDocumento[P]>
      : GetScalarType<T[P], AggregateRegistroDocumento[P]>
  }




  export type RegistroDocumentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistroDocumentoWhereInput
    orderBy?: RegistroDocumentoOrderByWithAggregationInput | RegistroDocumentoOrderByWithAggregationInput[]
    by: RegistroDocumentoScalarFieldEnum[] | RegistroDocumentoScalarFieldEnum
    having?: RegistroDocumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistroDocumentoCountAggregateInputType | true
    _avg?: RegistroDocumentoAvgAggregateInputType
    _sum?: RegistroDocumentoSumAggregateInputType
    _min?: RegistroDocumentoMinAggregateInputType
    _max?: RegistroDocumentoMaxAggregateInputType
  }

  export type RegistroDocumentoGroupByOutputType = {
    id: number
    transportadoraId: number
    documentoId: number
    validade: Date | null
    urlArquivo: string | null
    createdAt: Date
    _count: RegistroDocumentoCountAggregateOutputType | null
    _avg: RegistroDocumentoAvgAggregateOutputType | null
    _sum: RegistroDocumentoSumAggregateOutputType | null
    _min: RegistroDocumentoMinAggregateOutputType | null
    _max: RegistroDocumentoMaxAggregateOutputType | null
  }

  type GetRegistroDocumentoGroupByPayload<T extends RegistroDocumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistroDocumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistroDocumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistroDocumentoGroupByOutputType[P]>
            : GetScalarType<T[P], RegistroDocumentoGroupByOutputType[P]>
        }
      >
    >


  export type RegistroDocumentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transportadoraId?: boolean
    documentoId?: boolean
    validade?: boolean
    urlArquivo?: boolean
    createdAt?: boolean
    transportadora?: boolean | TransportadoraDefaultArgs<ExtArgs>
    documento?: boolean | DocumentoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registroDocumento"]>

  export type RegistroDocumentoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transportadoraId?: boolean
    documentoId?: boolean
    validade?: boolean
    urlArquivo?: boolean
    createdAt?: boolean
    transportadora?: boolean | TransportadoraDefaultArgs<ExtArgs>
    documento?: boolean | DocumentoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registroDocumento"]>

  export type RegistroDocumentoSelectScalar = {
    id?: boolean
    transportadoraId?: boolean
    documentoId?: boolean
    validade?: boolean
    urlArquivo?: boolean
    createdAt?: boolean
  }

  export type RegistroDocumentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transportadora?: boolean | TransportadoraDefaultArgs<ExtArgs>
    documento?: boolean | DocumentoDefaultArgs<ExtArgs>
  }
  export type RegistroDocumentoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transportadora?: boolean | TransportadoraDefaultArgs<ExtArgs>
    documento?: boolean | DocumentoDefaultArgs<ExtArgs>
  }

  export type $RegistroDocumentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RegistroDocumento"
    objects: {
      transportadora: Prisma.$TransportadoraPayload<ExtArgs>
      documento: Prisma.$DocumentoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      transportadoraId: number
      documentoId: number
      validade: Date | null
      urlArquivo: string | null
      createdAt: Date
    }, ExtArgs["result"]["registroDocumento"]>
    composites: {}
  }

  type RegistroDocumentoGetPayload<S extends boolean | null | undefined | RegistroDocumentoDefaultArgs> = $Result.GetResult<Prisma.$RegistroDocumentoPayload, S>

  type RegistroDocumentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RegistroDocumentoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RegistroDocumentoCountAggregateInputType | true
    }

  export interface RegistroDocumentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RegistroDocumento'], meta: { name: 'RegistroDocumento' } }
    /**
     * Find zero or one RegistroDocumento that matches the filter.
     * @param {RegistroDocumentoFindUniqueArgs} args - Arguments to find a RegistroDocumento
     * @example
     * // Get one RegistroDocumento
     * const registroDocumento = await prisma.registroDocumento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegistroDocumentoFindUniqueArgs>(args: SelectSubset<T, RegistroDocumentoFindUniqueArgs<ExtArgs>>): Prisma__RegistroDocumentoClient<$Result.GetResult<Prisma.$RegistroDocumentoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RegistroDocumento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RegistroDocumentoFindUniqueOrThrowArgs} args - Arguments to find a RegistroDocumento
     * @example
     * // Get one RegistroDocumento
     * const registroDocumento = await prisma.registroDocumento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegistroDocumentoFindUniqueOrThrowArgs>(args: SelectSubset<T, RegistroDocumentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegistroDocumentoClient<$Result.GetResult<Prisma.$RegistroDocumentoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RegistroDocumento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroDocumentoFindFirstArgs} args - Arguments to find a RegistroDocumento
     * @example
     * // Get one RegistroDocumento
     * const registroDocumento = await prisma.registroDocumento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegistroDocumentoFindFirstArgs>(args?: SelectSubset<T, RegistroDocumentoFindFirstArgs<ExtArgs>>): Prisma__RegistroDocumentoClient<$Result.GetResult<Prisma.$RegistroDocumentoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RegistroDocumento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroDocumentoFindFirstOrThrowArgs} args - Arguments to find a RegistroDocumento
     * @example
     * // Get one RegistroDocumento
     * const registroDocumento = await prisma.registroDocumento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegistroDocumentoFindFirstOrThrowArgs>(args?: SelectSubset<T, RegistroDocumentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegistroDocumentoClient<$Result.GetResult<Prisma.$RegistroDocumentoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RegistroDocumentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroDocumentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RegistroDocumentos
     * const registroDocumentos = await prisma.registroDocumento.findMany()
     * 
     * // Get first 10 RegistroDocumentos
     * const registroDocumentos = await prisma.registroDocumento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registroDocumentoWithIdOnly = await prisma.registroDocumento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegistroDocumentoFindManyArgs>(args?: SelectSubset<T, RegistroDocumentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroDocumentoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RegistroDocumento.
     * @param {RegistroDocumentoCreateArgs} args - Arguments to create a RegistroDocumento.
     * @example
     * // Create one RegistroDocumento
     * const RegistroDocumento = await prisma.registroDocumento.create({
     *   data: {
     *     // ... data to create a RegistroDocumento
     *   }
     * })
     * 
     */
    create<T extends RegistroDocumentoCreateArgs>(args: SelectSubset<T, RegistroDocumentoCreateArgs<ExtArgs>>): Prisma__RegistroDocumentoClient<$Result.GetResult<Prisma.$RegistroDocumentoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RegistroDocumentos.
     * @param {RegistroDocumentoCreateManyArgs} args - Arguments to create many RegistroDocumentos.
     * @example
     * // Create many RegistroDocumentos
     * const registroDocumento = await prisma.registroDocumento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegistroDocumentoCreateManyArgs>(args?: SelectSubset<T, RegistroDocumentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RegistroDocumentos and returns the data saved in the database.
     * @param {RegistroDocumentoCreateManyAndReturnArgs} args - Arguments to create many RegistroDocumentos.
     * @example
     * // Create many RegistroDocumentos
     * const registroDocumento = await prisma.registroDocumento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RegistroDocumentos and only return the `id`
     * const registroDocumentoWithIdOnly = await prisma.registroDocumento.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegistroDocumentoCreateManyAndReturnArgs>(args?: SelectSubset<T, RegistroDocumentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistroDocumentoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RegistroDocumento.
     * @param {RegistroDocumentoDeleteArgs} args - Arguments to delete one RegistroDocumento.
     * @example
     * // Delete one RegistroDocumento
     * const RegistroDocumento = await prisma.registroDocumento.delete({
     *   where: {
     *     // ... filter to delete one RegistroDocumento
     *   }
     * })
     * 
     */
    delete<T extends RegistroDocumentoDeleteArgs>(args: SelectSubset<T, RegistroDocumentoDeleteArgs<ExtArgs>>): Prisma__RegistroDocumentoClient<$Result.GetResult<Prisma.$RegistroDocumentoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RegistroDocumento.
     * @param {RegistroDocumentoUpdateArgs} args - Arguments to update one RegistroDocumento.
     * @example
     * // Update one RegistroDocumento
     * const registroDocumento = await prisma.registroDocumento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegistroDocumentoUpdateArgs>(args: SelectSubset<T, RegistroDocumentoUpdateArgs<ExtArgs>>): Prisma__RegistroDocumentoClient<$Result.GetResult<Prisma.$RegistroDocumentoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RegistroDocumentos.
     * @param {RegistroDocumentoDeleteManyArgs} args - Arguments to filter RegistroDocumentos to delete.
     * @example
     * // Delete a few RegistroDocumentos
     * const { count } = await prisma.registroDocumento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegistroDocumentoDeleteManyArgs>(args?: SelectSubset<T, RegistroDocumentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegistroDocumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroDocumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RegistroDocumentos
     * const registroDocumento = await prisma.registroDocumento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegistroDocumentoUpdateManyArgs>(args: SelectSubset<T, RegistroDocumentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RegistroDocumento.
     * @param {RegistroDocumentoUpsertArgs} args - Arguments to update or create a RegistroDocumento.
     * @example
     * // Update or create a RegistroDocumento
     * const registroDocumento = await prisma.registroDocumento.upsert({
     *   create: {
     *     // ... data to create a RegistroDocumento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RegistroDocumento we want to update
     *   }
     * })
     */
    upsert<T extends RegistroDocumentoUpsertArgs>(args: SelectSubset<T, RegistroDocumentoUpsertArgs<ExtArgs>>): Prisma__RegistroDocumentoClient<$Result.GetResult<Prisma.$RegistroDocumentoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RegistroDocumentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroDocumentoCountArgs} args - Arguments to filter RegistroDocumentos to count.
     * @example
     * // Count the number of RegistroDocumentos
     * const count = await prisma.registroDocumento.count({
     *   where: {
     *     // ... the filter for the RegistroDocumentos we want to count
     *   }
     * })
    **/
    count<T extends RegistroDocumentoCountArgs>(
      args?: Subset<T, RegistroDocumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistroDocumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RegistroDocumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroDocumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistroDocumentoAggregateArgs>(args: Subset<T, RegistroDocumentoAggregateArgs>): Prisma.PrismaPromise<GetRegistroDocumentoAggregateType<T>>

    /**
     * Group by RegistroDocumento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistroDocumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegistroDocumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegistroDocumentoGroupByArgs['orderBy'] }
        : { orderBy?: RegistroDocumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegistroDocumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistroDocumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RegistroDocumento model
   */
  readonly fields: RegistroDocumentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RegistroDocumento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegistroDocumentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transportadora<T extends TransportadoraDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TransportadoraDefaultArgs<ExtArgs>>): Prisma__TransportadoraClient<$Result.GetResult<Prisma.$TransportadoraPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    documento<T extends DocumentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentoDefaultArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RegistroDocumento model
   */ 
  interface RegistroDocumentoFieldRefs {
    readonly id: FieldRef<"RegistroDocumento", 'Int'>
    readonly transportadoraId: FieldRef<"RegistroDocumento", 'Int'>
    readonly documentoId: FieldRef<"RegistroDocumento", 'Int'>
    readonly validade: FieldRef<"RegistroDocumento", 'DateTime'>
    readonly urlArquivo: FieldRef<"RegistroDocumento", 'String'>
    readonly createdAt: FieldRef<"RegistroDocumento", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RegistroDocumento findUnique
   */
  export type RegistroDocumentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which RegistroDocumento to fetch.
     */
    where: RegistroDocumentoWhereUniqueInput
  }

  /**
   * RegistroDocumento findUniqueOrThrow
   */
  export type RegistroDocumentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which RegistroDocumento to fetch.
     */
    where: RegistroDocumentoWhereUniqueInput
  }

  /**
   * RegistroDocumento findFirst
   */
  export type RegistroDocumentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which RegistroDocumento to fetch.
     */
    where?: RegistroDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegistroDocumentos to fetch.
     */
    orderBy?: RegistroDocumentoOrderByWithRelationInput | RegistroDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegistroDocumentos.
     */
    cursor?: RegistroDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegistroDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegistroDocumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegistroDocumentos.
     */
    distinct?: RegistroDocumentoScalarFieldEnum | RegistroDocumentoScalarFieldEnum[]
  }

  /**
   * RegistroDocumento findFirstOrThrow
   */
  export type RegistroDocumentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which RegistroDocumento to fetch.
     */
    where?: RegistroDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegistroDocumentos to fetch.
     */
    orderBy?: RegistroDocumentoOrderByWithRelationInput | RegistroDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegistroDocumentos.
     */
    cursor?: RegistroDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegistroDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegistroDocumentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegistroDocumentos.
     */
    distinct?: RegistroDocumentoScalarFieldEnum | RegistroDocumentoScalarFieldEnum[]
  }

  /**
   * RegistroDocumento findMany
   */
  export type RegistroDocumentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoInclude<ExtArgs> | null
    /**
     * Filter, which RegistroDocumentos to fetch.
     */
    where?: RegistroDocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegistroDocumentos to fetch.
     */
    orderBy?: RegistroDocumentoOrderByWithRelationInput | RegistroDocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RegistroDocumentos.
     */
    cursor?: RegistroDocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegistroDocumentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegistroDocumentos.
     */
    skip?: number
    distinct?: RegistroDocumentoScalarFieldEnum | RegistroDocumentoScalarFieldEnum[]
  }

  /**
   * RegistroDocumento create
   */
  export type RegistroDocumentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoInclude<ExtArgs> | null
    /**
     * The data needed to create a RegistroDocumento.
     */
    data: XOR<RegistroDocumentoCreateInput, RegistroDocumentoUncheckedCreateInput>
  }

  /**
   * RegistroDocumento createMany
   */
  export type RegistroDocumentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RegistroDocumentos.
     */
    data: RegistroDocumentoCreateManyInput | RegistroDocumentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RegistroDocumento createManyAndReturn
   */
  export type RegistroDocumentoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RegistroDocumentos.
     */
    data: RegistroDocumentoCreateManyInput | RegistroDocumentoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RegistroDocumento update
   */
  export type RegistroDocumentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoInclude<ExtArgs> | null
    /**
     * The data needed to update a RegistroDocumento.
     */
    data: XOR<RegistroDocumentoUpdateInput, RegistroDocumentoUncheckedUpdateInput>
    /**
     * Choose, which RegistroDocumento to update.
     */
    where: RegistroDocumentoWhereUniqueInput
  }

  /**
   * RegistroDocumento updateMany
   */
  export type RegistroDocumentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RegistroDocumentos.
     */
    data: XOR<RegistroDocumentoUpdateManyMutationInput, RegistroDocumentoUncheckedUpdateManyInput>
    /**
     * Filter which RegistroDocumentos to update
     */
    where?: RegistroDocumentoWhereInput
  }

  /**
   * RegistroDocumento upsert
   */
  export type RegistroDocumentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoInclude<ExtArgs> | null
    /**
     * The filter to search for the RegistroDocumento to update in case it exists.
     */
    where: RegistroDocumentoWhereUniqueInput
    /**
     * In case the RegistroDocumento found by the `where` argument doesn't exist, create a new RegistroDocumento with this data.
     */
    create: XOR<RegistroDocumentoCreateInput, RegistroDocumentoUncheckedCreateInput>
    /**
     * In case the RegistroDocumento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegistroDocumentoUpdateInput, RegistroDocumentoUncheckedUpdateInput>
  }

  /**
   * RegistroDocumento delete
   */
  export type RegistroDocumentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoInclude<ExtArgs> | null
    /**
     * Filter which RegistroDocumento to delete.
     */
    where: RegistroDocumentoWhereUniqueInput
  }

  /**
   * RegistroDocumento deleteMany
   */
  export type RegistroDocumentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegistroDocumentos to delete
     */
    where?: RegistroDocumentoWhereInput
  }

  /**
   * RegistroDocumento without action
   */
  export type RegistroDocumentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistroDocumento
     */
    select?: RegistroDocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistroDocumentoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TransportadoraScalarFieldEnum: {
    id: 'id',
    razaoSocial: 'razaoSocial',
    cnpj: 'cnpj',
    uf: 'uf',
    quimicosControlados: 'quimicosControlados',
    disponivelParaFrete: 'disponivelParaFrete',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransportadoraScalarFieldEnum = (typeof TransportadoraScalarFieldEnum)[keyof typeof TransportadoraScalarFieldEnum]


  export const DocumentoScalarFieldEnum: {
    id: 'id',
    codigo: 'codigo',
    nome: 'nome',
    obgQuimicos: 'obgQuimicos',
    obgNaoQuimicos: 'obgNaoQuimicos'
  };

  export type DocumentoScalarFieldEnum = (typeof DocumentoScalarFieldEnum)[keyof typeof DocumentoScalarFieldEnum]


  export const RegistroDocumentoScalarFieldEnum: {
    id: 'id',
    transportadoraId: 'transportadoraId',
    documentoId: 'documentoId',
    validade: 'validade',
    urlArquivo: 'urlArquivo',
    createdAt: 'createdAt'
  };

  export type RegistroDocumentoScalarFieldEnum = (typeof RegistroDocumentoScalarFieldEnum)[keyof typeof RegistroDocumentoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TransportadoraWhereInput = {
    AND?: TransportadoraWhereInput | TransportadoraWhereInput[]
    OR?: TransportadoraWhereInput[]
    NOT?: TransportadoraWhereInput | TransportadoraWhereInput[]
    id?: IntFilter<"Transportadora"> | number
    razaoSocial?: StringFilter<"Transportadora"> | string
    cnpj?: StringFilter<"Transportadora"> | string
    uf?: StringFilter<"Transportadora"> | string
    quimicosControlados?: BoolFilter<"Transportadora"> | boolean
    disponivelParaFrete?: BoolFilter<"Transportadora"> | boolean
    createdAt?: DateTimeFilter<"Transportadora"> | Date | string
    updatedAt?: DateTimeFilter<"Transportadora"> | Date | string
    registros?: RegistroDocumentoListRelationFilter
  }

  export type TransportadoraOrderByWithRelationInput = {
    id?: SortOrder
    razaoSocial?: SortOrder
    cnpj?: SortOrder
    uf?: SortOrder
    quimicosControlados?: SortOrder
    disponivelParaFrete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registros?: RegistroDocumentoOrderByRelationAggregateInput
  }

  export type TransportadoraWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cnpj?: string
    AND?: TransportadoraWhereInput | TransportadoraWhereInput[]
    OR?: TransportadoraWhereInput[]
    NOT?: TransportadoraWhereInput | TransportadoraWhereInput[]
    razaoSocial?: StringFilter<"Transportadora"> | string
    uf?: StringFilter<"Transportadora"> | string
    quimicosControlados?: BoolFilter<"Transportadora"> | boolean
    disponivelParaFrete?: BoolFilter<"Transportadora"> | boolean
    createdAt?: DateTimeFilter<"Transportadora"> | Date | string
    updatedAt?: DateTimeFilter<"Transportadora"> | Date | string
    registros?: RegistroDocumentoListRelationFilter
  }, "id" | "cnpj">

  export type TransportadoraOrderByWithAggregationInput = {
    id?: SortOrder
    razaoSocial?: SortOrder
    cnpj?: SortOrder
    uf?: SortOrder
    quimicosControlados?: SortOrder
    disponivelParaFrete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransportadoraCountOrderByAggregateInput
    _avg?: TransportadoraAvgOrderByAggregateInput
    _max?: TransportadoraMaxOrderByAggregateInput
    _min?: TransportadoraMinOrderByAggregateInput
    _sum?: TransportadoraSumOrderByAggregateInput
  }

  export type TransportadoraScalarWhereWithAggregatesInput = {
    AND?: TransportadoraScalarWhereWithAggregatesInput | TransportadoraScalarWhereWithAggregatesInput[]
    OR?: TransportadoraScalarWhereWithAggregatesInput[]
    NOT?: TransportadoraScalarWhereWithAggregatesInput | TransportadoraScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transportadora"> | number
    razaoSocial?: StringWithAggregatesFilter<"Transportadora"> | string
    cnpj?: StringWithAggregatesFilter<"Transportadora"> | string
    uf?: StringWithAggregatesFilter<"Transportadora"> | string
    quimicosControlados?: BoolWithAggregatesFilter<"Transportadora"> | boolean
    disponivelParaFrete?: BoolWithAggregatesFilter<"Transportadora"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Transportadora"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transportadora"> | Date | string
  }

  export type DocumentoWhereInput = {
    AND?: DocumentoWhereInput | DocumentoWhereInput[]
    OR?: DocumentoWhereInput[]
    NOT?: DocumentoWhereInput | DocumentoWhereInput[]
    id?: IntFilter<"Documento"> | number
    codigo?: StringFilter<"Documento"> | string
    nome?: StringFilter<"Documento"> | string
    obgQuimicos?: BoolFilter<"Documento"> | boolean
    obgNaoQuimicos?: BoolFilter<"Documento"> | boolean
    registros?: RegistroDocumentoListRelationFilter
  }

  export type DocumentoOrderByWithRelationInput = {
    id?: SortOrder
    codigo?: SortOrder
    nome?: SortOrder
    obgQuimicos?: SortOrder
    obgNaoQuimicos?: SortOrder
    registros?: RegistroDocumentoOrderByRelationAggregateInput
  }

  export type DocumentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    codigo?: string
    AND?: DocumentoWhereInput | DocumentoWhereInput[]
    OR?: DocumentoWhereInput[]
    NOT?: DocumentoWhereInput | DocumentoWhereInput[]
    nome?: StringFilter<"Documento"> | string
    obgQuimicos?: BoolFilter<"Documento"> | boolean
    obgNaoQuimicos?: BoolFilter<"Documento"> | boolean
    registros?: RegistroDocumentoListRelationFilter
  }, "id" | "codigo">

  export type DocumentoOrderByWithAggregationInput = {
    id?: SortOrder
    codigo?: SortOrder
    nome?: SortOrder
    obgQuimicos?: SortOrder
    obgNaoQuimicos?: SortOrder
    _count?: DocumentoCountOrderByAggregateInput
    _avg?: DocumentoAvgOrderByAggregateInput
    _max?: DocumentoMaxOrderByAggregateInput
    _min?: DocumentoMinOrderByAggregateInput
    _sum?: DocumentoSumOrderByAggregateInput
  }

  export type DocumentoScalarWhereWithAggregatesInput = {
    AND?: DocumentoScalarWhereWithAggregatesInput | DocumentoScalarWhereWithAggregatesInput[]
    OR?: DocumentoScalarWhereWithAggregatesInput[]
    NOT?: DocumentoScalarWhereWithAggregatesInput | DocumentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Documento"> | number
    codigo?: StringWithAggregatesFilter<"Documento"> | string
    nome?: StringWithAggregatesFilter<"Documento"> | string
    obgQuimicos?: BoolWithAggregatesFilter<"Documento"> | boolean
    obgNaoQuimicos?: BoolWithAggregatesFilter<"Documento"> | boolean
  }

  export type RegistroDocumentoWhereInput = {
    AND?: RegistroDocumentoWhereInput | RegistroDocumentoWhereInput[]
    OR?: RegistroDocumentoWhereInput[]
    NOT?: RegistroDocumentoWhereInput | RegistroDocumentoWhereInput[]
    id?: IntFilter<"RegistroDocumento"> | number
    transportadoraId?: IntFilter<"RegistroDocumento"> | number
    documentoId?: IntFilter<"RegistroDocumento"> | number
    validade?: DateTimeNullableFilter<"RegistroDocumento"> | Date | string | null
    urlArquivo?: StringNullableFilter<"RegistroDocumento"> | string | null
    createdAt?: DateTimeFilter<"RegistroDocumento"> | Date | string
    transportadora?: XOR<TransportadoraRelationFilter, TransportadoraWhereInput>
    documento?: XOR<DocumentoRelationFilter, DocumentoWhereInput>
  }

  export type RegistroDocumentoOrderByWithRelationInput = {
    id?: SortOrder
    transportadoraId?: SortOrder
    documentoId?: SortOrder
    validade?: SortOrderInput | SortOrder
    urlArquivo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    transportadora?: TransportadoraOrderByWithRelationInput
    documento?: DocumentoOrderByWithRelationInput
  }

  export type RegistroDocumentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RegistroDocumentoWhereInput | RegistroDocumentoWhereInput[]
    OR?: RegistroDocumentoWhereInput[]
    NOT?: RegistroDocumentoWhereInput | RegistroDocumentoWhereInput[]
    transportadoraId?: IntFilter<"RegistroDocumento"> | number
    documentoId?: IntFilter<"RegistroDocumento"> | number
    validade?: DateTimeNullableFilter<"RegistroDocumento"> | Date | string | null
    urlArquivo?: StringNullableFilter<"RegistroDocumento"> | string | null
    createdAt?: DateTimeFilter<"RegistroDocumento"> | Date | string
    transportadora?: XOR<TransportadoraRelationFilter, TransportadoraWhereInput>
    documento?: XOR<DocumentoRelationFilter, DocumentoWhereInput>
  }, "id">

  export type RegistroDocumentoOrderByWithAggregationInput = {
    id?: SortOrder
    transportadoraId?: SortOrder
    documentoId?: SortOrder
    validade?: SortOrderInput | SortOrder
    urlArquivo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: RegistroDocumentoCountOrderByAggregateInput
    _avg?: RegistroDocumentoAvgOrderByAggregateInput
    _max?: RegistroDocumentoMaxOrderByAggregateInput
    _min?: RegistroDocumentoMinOrderByAggregateInput
    _sum?: RegistroDocumentoSumOrderByAggregateInput
  }

  export type RegistroDocumentoScalarWhereWithAggregatesInput = {
    AND?: RegistroDocumentoScalarWhereWithAggregatesInput | RegistroDocumentoScalarWhereWithAggregatesInput[]
    OR?: RegistroDocumentoScalarWhereWithAggregatesInput[]
    NOT?: RegistroDocumentoScalarWhereWithAggregatesInput | RegistroDocumentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RegistroDocumento"> | number
    transportadoraId?: IntWithAggregatesFilter<"RegistroDocumento"> | number
    documentoId?: IntWithAggregatesFilter<"RegistroDocumento"> | number
    validade?: DateTimeNullableWithAggregatesFilter<"RegistroDocumento"> | Date | string | null
    urlArquivo?: StringNullableWithAggregatesFilter<"RegistroDocumento"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RegistroDocumento"> | Date | string
  }

  export type TransportadoraCreateInput = {
    razaoSocial: string
    cnpj: string
    uf: string
    quimicosControlados?: boolean
    disponivelParaFrete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    registros?: RegistroDocumentoCreateNestedManyWithoutTransportadoraInput
  }

  export type TransportadoraUncheckedCreateInput = {
    id?: number
    razaoSocial: string
    cnpj: string
    uf: string
    quimicosControlados?: boolean
    disponivelParaFrete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    registros?: RegistroDocumentoUncheckedCreateNestedManyWithoutTransportadoraInput
  }

  export type TransportadoraUpdateInput = {
    razaoSocial?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    quimicosControlados?: BoolFieldUpdateOperationsInput | boolean
    disponivelParaFrete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registros?: RegistroDocumentoUpdateManyWithoutTransportadoraNestedInput
  }

  export type TransportadoraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    razaoSocial?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    quimicosControlados?: BoolFieldUpdateOperationsInput | boolean
    disponivelParaFrete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registros?: RegistroDocumentoUncheckedUpdateManyWithoutTransportadoraNestedInput
  }

  export type TransportadoraCreateManyInput = {
    id?: number
    razaoSocial: string
    cnpj: string
    uf: string
    quimicosControlados?: boolean
    disponivelParaFrete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransportadoraUpdateManyMutationInput = {
    razaoSocial?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    quimicosControlados?: BoolFieldUpdateOperationsInput | boolean
    disponivelParaFrete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransportadoraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    razaoSocial?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    quimicosControlados?: BoolFieldUpdateOperationsInput | boolean
    disponivelParaFrete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoCreateInput = {
    codigo: string
    nome: string
    obgQuimicos?: boolean
    obgNaoQuimicos?: boolean
    registros?: RegistroDocumentoCreateNestedManyWithoutDocumentoInput
  }

  export type DocumentoUncheckedCreateInput = {
    id?: number
    codigo: string
    nome: string
    obgQuimicos?: boolean
    obgNaoQuimicos?: boolean
    registros?: RegistroDocumentoUncheckedCreateNestedManyWithoutDocumentoInput
  }

  export type DocumentoUpdateInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    obgQuimicos?: BoolFieldUpdateOperationsInput | boolean
    obgNaoQuimicos?: BoolFieldUpdateOperationsInput | boolean
    registros?: RegistroDocumentoUpdateManyWithoutDocumentoNestedInput
  }

  export type DocumentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    codigo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    obgQuimicos?: BoolFieldUpdateOperationsInput | boolean
    obgNaoQuimicos?: BoolFieldUpdateOperationsInput | boolean
    registros?: RegistroDocumentoUncheckedUpdateManyWithoutDocumentoNestedInput
  }

  export type DocumentoCreateManyInput = {
    id?: number
    codigo: string
    nome: string
    obgQuimicos?: boolean
    obgNaoQuimicos?: boolean
  }

  export type DocumentoUpdateManyMutationInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    obgQuimicos?: BoolFieldUpdateOperationsInput | boolean
    obgNaoQuimicos?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DocumentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    codigo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    obgQuimicos?: BoolFieldUpdateOperationsInput | boolean
    obgNaoQuimicos?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RegistroDocumentoCreateInput = {
    validade?: Date | string | null
    urlArquivo?: string | null
    createdAt?: Date | string
    transportadora: TransportadoraCreateNestedOneWithoutRegistrosInput
    documento: DocumentoCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroDocumentoUncheckedCreateInput = {
    id?: number
    transportadoraId: number
    documentoId: number
    validade?: Date | string | null
    urlArquivo?: string | null
    createdAt?: Date | string
  }

  export type RegistroDocumentoUpdateInput = {
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urlArquivo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transportadora?: TransportadoraUpdateOneRequiredWithoutRegistrosNestedInput
    documento?: DocumentoUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroDocumentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    transportadoraId?: IntFieldUpdateOperationsInput | number
    documentoId?: IntFieldUpdateOperationsInput | number
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urlArquivo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroDocumentoCreateManyInput = {
    id?: number
    transportadoraId: number
    documentoId: number
    validade?: Date | string | null
    urlArquivo?: string | null
    createdAt?: Date | string
  }

  export type RegistroDocumentoUpdateManyMutationInput = {
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urlArquivo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroDocumentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    transportadoraId?: IntFieldUpdateOperationsInput | number
    documentoId?: IntFieldUpdateOperationsInput | number
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urlArquivo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RegistroDocumentoListRelationFilter = {
    every?: RegistroDocumentoWhereInput
    some?: RegistroDocumentoWhereInput
    none?: RegistroDocumentoWhereInput
  }

  export type RegistroDocumentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransportadoraCountOrderByAggregateInput = {
    id?: SortOrder
    razaoSocial?: SortOrder
    cnpj?: SortOrder
    uf?: SortOrder
    quimicosControlados?: SortOrder
    disponivelParaFrete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransportadoraAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TransportadoraMaxOrderByAggregateInput = {
    id?: SortOrder
    razaoSocial?: SortOrder
    cnpj?: SortOrder
    uf?: SortOrder
    quimicosControlados?: SortOrder
    disponivelParaFrete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransportadoraMinOrderByAggregateInput = {
    id?: SortOrder
    razaoSocial?: SortOrder
    cnpj?: SortOrder
    uf?: SortOrder
    quimicosControlados?: SortOrder
    disponivelParaFrete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransportadoraSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DocumentoCountOrderByAggregateInput = {
    id?: SortOrder
    codigo?: SortOrder
    nome?: SortOrder
    obgQuimicos?: SortOrder
    obgNaoQuimicos?: SortOrder
  }

  export type DocumentoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DocumentoMaxOrderByAggregateInput = {
    id?: SortOrder
    codigo?: SortOrder
    nome?: SortOrder
    obgQuimicos?: SortOrder
    obgNaoQuimicos?: SortOrder
  }

  export type DocumentoMinOrderByAggregateInput = {
    id?: SortOrder
    codigo?: SortOrder
    nome?: SortOrder
    obgQuimicos?: SortOrder
    obgNaoQuimicos?: SortOrder
  }

  export type DocumentoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type TransportadoraRelationFilter = {
    is?: TransportadoraWhereInput
    isNot?: TransportadoraWhereInput
  }

  export type DocumentoRelationFilter = {
    is?: DocumentoWhereInput
    isNot?: DocumentoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RegistroDocumentoCountOrderByAggregateInput = {
    id?: SortOrder
    transportadoraId?: SortOrder
    documentoId?: SortOrder
    validade?: SortOrder
    urlArquivo?: SortOrder
    createdAt?: SortOrder
  }

  export type RegistroDocumentoAvgOrderByAggregateInput = {
    id?: SortOrder
    transportadoraId?: SortOrder
    documentoId?: SortOrder
  }

  export type RegistroDocumentoMaxOrderByAggregateInput = {
    id?: SortOrder
    transportadoraId?: SortOrder
    documentoId?: SortOrder
    validade?: SortOrder
    urlArquivo?: SortOrder
    createdAt?: SortOrder
  }

  export type RegistroDocumentoMinOrderByAggregateInput = {
    id?: SortOrder
    transportadoraId?: SortOrder
    documentoId?: SortOrder
    validade?: SortOrder
    urlArquivo?: SortOrder
    createdAt?: SortOrder
  }

  export type RegistroDocumentoSumOrderByAggregateInput = {
    id?: SortOrder
    transportadoraId?: SortOrder
    documentoId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type RegistroDocumentoCreateNestedManyWithoutTransportadoraInput = {
    create?: XOR<RegistroDocumentoCreateWithoutTransportadoraInput, RegistroDocumentoUncheckedCreateWithoutTransportadoraInput> | RegistroDocumentoCreateWithoutTransportadoraInput[] | RegistroDocumentoUncheckedCreateWithoutTransportadoraInput[]
    connectOrCreate?: RegistroDocumentoCreateOrConnectWithoutTransportadoraInput | RegistroDocumentoCreateOrConnectWithoutTransportadoraInput[]
    createMany?: RegistroDocumentoCreateManyTransportadoraInputEnvelope
    connect?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
  }

  export type RegistroDocumentoUncheckedCreateNestedManyWithoutTransportadoraInput = {
    create?: XOR<RegistroDocumentoCreateWithoutTransportadoraInput, RegistroDocumentoUncheckedCreateWithoutTransportadoraInput> | RegistroDocumentoCreateWithoutTransportadoraInput[] | RegistroDocumentoUncheckedCreateWithoutTransportadoraInput[]
    connectOrCreate?: RegistroDocumentoCreateOrConnectWithoutTransportadoraInput | RegistroDocumentoCreateOrConnectWithoutTransportadoraInput[]
    createMany?: RegistroDocumentoCreateManyTransportadoraInputEnvelope
    connect?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RegistroDocumentoUpdateManyWithoutTransportadoraNestedInput = {
    create?: XOR<RegistroDocumentoCreateWithoutTransportadoraInput, RegistroDocumentoUncheckedCreateWithoutTransportadoraInput> | RegistroDocumentoCreateWithoutTransportadoraInput[] | RegistroDocumentoUncheckedCreateWithoutTransportadoraInput[]
    connectOrCreate?: RegistroDocumentoCreateOrConnectWithoutTransportadoraInput | RegistroDocumentoCreateOrConnectWithoutTransportadoraInput[]
    upsert?: RegistroDocumentoUpsertWithWhereUniqueWithoutTransportadoraInput | RegistroDocumentoUpsertWithWhereUniqueWithoutTransportadoraInput[]
    createMany?: RegistroDocumentoCreateManyTransportadoraInputEnvelope
    set?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    disconnect?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    delete?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    connect?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    update?: RegistroDocumentoUpdateWithWhereUniqueWithoutTransportadoraInput | RegistroDocumentoUpdateWithWhereUniqueWithoutTransportadoraInput[]
    updateMany?: RegistroDocumentoUpdateManyWithWhereWithoutTransportadoraInput | RegistroDocumentoUpdateManyWithWhereWithoutTransportadoraInput[]
    deleteMany?: RegistroDocumentoScalarWhereInput | RegistroDocumentoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RegistroDocumentoUncheckedUpdateManyWithoutTransportadoraNestedInput = {
    create?: XOR<RegistroDocumentoCreateWithoutTransportadoraInput, RegistroDocumentoUncheckedCreateWithoutTransportadoraInput> | RegistroDocumentoCreateWithoutTransportadoraInput[] | RegistroDocumentoUncheckedCreateWithoutTransportadoraInput[]
    connectOrCreate?: RegistroDocumentoCreateOrConnectWithoutTransportadoraInput | RegistroDocumentoCreateOrConnectWithoutTransportadoraInput[]
    upsert?: RegistroDocumentoUpsertWithWhereUniqueWithoutTransportadoraInput | RegistroDocumentoUpsertWithWhereUniqueWithoutTransportadoraInput[]
    createMany?: RegistroDocumentoCreateManyTransportadoraInputEnvelope
    set?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    disconnect?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    delete?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    connect?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    update?: RegistroDocumentoUpdateWithWhereUniqueWithoutTransportadoraInput | RegistroDocumentoUpdateWithWhereUniqueWithoutTransportadoraInput[]
    updateMany?: RegistroDocumentoUpdateManyWithWhereWithoutTransportadoraInput | RegistroDocumentoUpdateManyWithWhereWithoutTransportadoraInput[]
    deleteMany?: RegistroDocumentoScalarWhereInput | RegistroDocumentoScalarWhereInput[]
  }

  export type RegistroDocumentoCreateNestedManyWithoutDocumentoInput = {
    create?: XOR<RegistroDocumentoCreateWithoutDocumentoInput, RegistroDocumentoUncheckedCreateWithoutDocumentoInput> | RegistroDocumentoCreateWithoutDocumentoInput[] | RegistroDocumentoUncheckedCreateWithoutDocumentoInput[]
    connectOrCreate?: RegistroDocumentoCreateOrConnectWithoutDocumentoInput | RegistroDocumentoCreateOrConnectWithoutDocumentoInput[]
    createMany?: RegistroDocumentoCreateManyDocumentoInputEnvelope
    connect?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
  }

  export type RegistroDocumentoUncheckedCreateNestedManyWithoutDocumentoInput = {
    create?: XOR<RegistroDocumentoCreateWithoutDocumentoInput, RegistroDocumentoUncheckedCreateWithoutDocumentoInput> | RegistroDocumentoCreateWithoutDocumentoInput[] | RegistroDocumentoUncheckedCreateWithoutDocumentoInput[]
    connectOrCreate?: RegistroDocumentoCreateOrConnectWithoutDocumentoInput | RegistroDocumentoCreateOrConnectWithoutDocumentoInput[]
    createMany?: RegistroDocumentoCreateManyDocumentoInputEnvelope
    connect?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
  }

  export type RegistroDocumentoUpdateManyWithoutDocumentoNestedInput = {
    create?: XOR<RegistroDocumentoCreateWithoutDocumentoInput, RegistroDocumentoUncheckedCreateWithoutDocumentoInput> | RegistroDocumentoCreateWithoutDocumentoInput[] | RegistroDocumentoUncheckedCreateWithoutDocumentoInput[]
    connectOrCreate?: RegistroDocumentoCreateOrConnectWithoutDocumentoInput | RegistroDocumentoCreateOrConnectWithoutDocumentoInput[]
    upsert?: RegistroDocumentoUpsertWithWhereUniqueWithoutDocumentoInput | RegistroDocumentoUpsertWithWhereUniqueWithoutDocumentoInput[]
    createMany?: RegistroDocumentoCreateManyDocumentoInputEnvelope
    set?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    disconnect?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    delete?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    connect?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    update?: RegistroDocumentoUpdateWithWhereUniqueWithoutDocumentoInput | RegistroDocumentoUpdateWithWhereUniqueWithoutDocumentoInput[]
    updateMany?: RegistroDocumentoUpdateManyWithWhereWithoutDocumentoInput | RegistroDocumentoUpdateManyWithWhereWithoutDocumentoInput[]
    deleteMany?: RegistroDocumentoScalarWhereInput | RegistroDocumentoScalarWhereInput[]
  }

  export type RegistroDocumentoUncheckedUpdateManyWithoutDocumentoNestedInput = {
    create?: XOR<RegistroDocumentoCreateWithoutDocumentoInput, RegistroDocumentoUncheckedCreateWithoutDocumentoInput> | RegistroDocumentoCreateWithoutDocumentoInput[] | RegistroDocumentoUncheckedCreateWithoutDocumentoInput[]
    connectOrCreate?: RegistroDocumentoCreateOrConnectWithoutDocumentoInput | RegistroDocumentoCreateOrConnectWithoutDocumentoInput[]
    upsert?: RegistroDocumentoUpsertWithWhereUniqueWithoutDocumentoInput | RegistroDocumentoUpsertWithWhereUniqueWithoutDocumentoInput[]
    createMany?: RegistroDocumentoCreateManyDocumentoInputEnvelope
    set?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    disconnect?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    delete?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    connect?: RegistroDocumentoWhereUniqueInput | RegistroDocumentoWhereUniqueInput[]
    update?: RegistroDocumentoUpdateWithWhereUniqueWithoutDocumentoInput | RegistroDocumentoUpdateWithWhereUniqueWithoutDocumentoInput[]
    updateMany?: RegistroDocumentoUpdateManyWithWhereWithoutDocumentoInput | RegistroDocumentoUpdateManyWithWhereWithoutDocumentoInput[]
    deleteMany?: RegistroDocumentoScalarWhereInput | RegistroDocumentoScalarWhereInput[]
  }

  export type TransportadoraCreateNestedOneWithoutRegistrosInput = {
    create?: XOR<TransportadoraCreateWithoutRegistrosInput, TransportadoraUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: TransportadoraCreateOrConnectWithoutRegistrosInput
    connect?: TransportadoraWhereUniqueInput
  }

  export type DocumentoCreateNestedOneWithoutRegistrosInput = {
    create?: XOR<DocumentoCreateWithoutRegistrosInput, DocumentoUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: DocumentoCreateOrConnectWithoutRegistrosInput
    connect?: DocumentoWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type TransportadoraUpdateOneRequiredWithoutRegistrosNestedInput = {
    create?: XOR<TransportadoraCreateWithoutRegistrosInput, TransportadoraUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: TransportadoraCreateOrConnectWithoutRegistrosInput
    upsert?: TransportadoraUpsertWithoutRegistrosInput
    connect?: TransportadoraWhereUniqueInput
    update?: XOR<XOR<TransportadoraUpdateToOneWithWhereWithoutRegistrosInput, TransportadoraUpdateWithoutRegistrosInput>, TransportadoraUncheckedUpdateWithoutRegistrosInput>
  }

  export type DocumentoUpdateOneRequiredWithoutRegistrosNestedInput = {
    create?: XOR<DocumentoCreateWithoutRegistrosInput, DocumentoUncheckedCreateWithoutRegistrosInput>
    connectOrCreate?: DocumentoCreateOrConnectWithoutRegistrosInput
    upsert?: DocumentoUpsertWithoutRegistrosInput
    connect?: DocumentoWhereUniqueInput
    update?: XOR<XOR<DocumentoUpdateToOneWithWhereWithoutRegistrosInput, DocumentoUpdateWithoutRegistrosInput>, DocumentoUncheckedUpdateWithoutRegistrosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type RegistroDocumentoCreateWithoutTransportadoraInput = {
    validade?: Date | string | null
    urlArquivo?: string | null
    createdAt?: Date | string
    documento: DocumentoCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroDocumentoUncheckedCreateWithoutTransportadoraInput = {
    id?: number
    documentoId: number
    validade?: Date | string | null
    urlArquivo?: string | null
    createdAt?: Date | string
  }

  export type RegistroDocumentoCreateOrConnectWithoutTransportadoraInput = {
    where: RegistroDocumentoWhereUniqueInput
    create: XOR<RegistroDocumentoCreateWithoutTransportadoraInput, RegistroDocumentoUncheckedCreateWithoutTransportadoraInput>
  }

  export type RegistroDocumentoCreateManyTransportadoraInputEnvelope = {
    data: RegistroDocumentoCreateManyTransportadoraInput | RegistroDocumentoCreateManyTransportadoraInput[]
    skipDuplicates?: boolean
  }

  export type RegistroDocumentoUpsertWithWhereUniqueWithoutTransportadoraInput = {
    where: RegistroDocumentoWhereUniqueInput
    update: XOR<RegistroDocumentoUpdateWithoutTransportadoraInput, RegistroDocumentoUncheckedUpdateWithoutTransportadoraInput>
    create: XOR<RegistroDocumentoCreateWithoutTransportadoraInput, RegistroDocumentoUncheckedCreateWithoutTransportadoraInput>
  }

  export type RegistroDocumentoUpdateWithWhereUniqueWithoutTransportadoraInput = {
    where: RegistroDocumentoWhereUniqueInput
    data: XOR<RegistroDocumentoUpdateWithoutTransportadoraInput, RegistroDocumentoUncheckedUpdateWithoutTransportadoraInput>
  }

  export type RegistroDocumentoUpdateManyWithWhereWithoutTransportadoraInput = {
    where: RegistroDocumentoScalarWhereInput
    data: XOR<RegistroDocumentoUpdateManyMutationInput, RegistroDocumentoUncheckedUpdateManyWithoutTransportadoraInput>
  }

  export type RegistroDocumentoScalarWhereInput = {
    AND?: RegistroDocumentoScalarWhereInput | RegistroDocumentoScalarWhereInput[]
    OR?: RegistroDocumentoScalarWhereInput[]
    NOT?: RegistroDocumentoScalarWhereInput | RegistroDocumentoScalarWhereInput[]
    id?: IntFilter<"RegistroDocumento"> | number
    transportadoraId?: IntFilter<"RegistroDocumento"> | number
    documentoId?: IntFilter<"RegistroDocumento"> | number
    validade?: DateTimeNullableFilter<"RegistroDocumento"> | Date | string | null
    urlArquivo?: StringNullableFilter<"RegistroDocumento"> | string | null
    createdAt?: DateTimeFilter<"RegistroDocumento"> | Date | string
  }

  export type RegistroDocumentoCreateWithoutDocumentoInput = {
    validade?: Date | string | null
    urlArquivo?: string | null
    createdAt?: Date | string
    transportadora: TransportadoraCreateNestedOneWithoutRegistrosInput
  }

  export type RegistroDocumentoUncheckedCreateWithoutDocumentoInput = {
    id?: number
    transportadoraId: number
    validade?: Date | string | null
    urlArquivo?: string | null
    createdAt?: Date | string
  }

  export type RegistroDocumentoCreateOrConnectWithoutDocumentoInput = {
    where: RegistroDocumentoWhereUniqueInput
    create: XOR<RegistroDocumentoCreateWithoutDocumentoInput, RegistroDocumentoUncheckedCreateWithoutDocumentoInput>
  }

  export type RegistroDocumentoCreateManyDocumentoInputEnvelope = {
    data: RegistroDocumentoCreateManyDocumentoInput | RegistroDocumentoCreateManyDocumentoInput[]
    skipDuplicates?: boolean
  }

  export type RegistroDocumentoUpsertWithWhereUniqueWithoutDocumentoInput = {
    where: RegistroDocumentoWhereUniqueInput
    update: XOR<RegistroDocumentoUpdateWithoutDocumentoInput, RegistroDocumentoUncheckedUpdateWithoutDocumentoInput>
    create: XOR<RegistroDocumentoCreateWithoutDocumentoInput, RegistroDocumentoUncheckedCreateWithoutDocumentoInput>
  }

  export type RegistroDocumentoUpdateWithWhereUniqueWithoutDocumentoInput = {
    where: RegistroDocumentoWhereUniqueInput
    data: XOR<RegistroDocumentoUpdateWithoutDocumentoInput, RegistroDocumentoUncheckedUpdateWithoutDocumentoInput>
  }

  export type RegistroDocumentoUpdateManyWithWhereWithoutDocumentoInput = {
    where: RegistroDocumentoScalarWhereInput
    data: XOR<RegistroDocumentoUpdateManyMutationInput, RegistroDocumentoUncheckedUpdateManyWithoutDocumentoInput>
  }

  export type TransportadoraCreateWithoutRegistrosInput = {
    razaoSocial: string
    cnpj: string
    uf: string
    quimicosControlados?: boolean
    disponivelParaFrete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransportadoraUncheckedCreateWithoutRegistrosInput = {
    id?: number
    razaoSocial: string
    cnpj: string
    uf: string
    quimicosControlados?: boolean
    disponivelParaFrete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransportadoraCreateOrConnectWithoutRegistrosInput = {
    where: TransportadoraWhereUniqueInput
    create: XOR<TransportadoraCreateWithoutRegistrosInput, TransportadoraUncheckedCreateWithoutRegistrosInput>
  }

  export type DocumentoCreateWithoutRegistrosInput = {
    codigo: string
    nome: string
    obgQuimicos?: boolean
    obgNaoQuimicos?: boolean
  }

  export type DocumentoUncheckedCreateWithoutRegistrosInput = {
    id?: number
    codigo: string
    nome: string
    obgQuimicos?: boolean
    obgNaoQuimicos?: boolean
  }

  export type DocumentoCreateOrConnectWithoutRegistrosInput = {
    where: DocumentoWhereUniqueInput
    create: XOR<DocumentoCreateWithoutRegistrosInput, DocumentoUncheckedCreateWithoutRegistrosInput>
  }

  export type TransportadoraUpsertWithoutRegistrosInput = {
    update: XOR<TransportadoraUpdateWithoutRegistrosInput, TransportadoraUncheckedUpdateWithoutRegistrosInput>
    create: XOR<TransportadoraCreateWithoutRegistrosInput, TransportadoraUncheckedCreateWithoutRegistrosInput>
    where?: TransportadoraWhereInput
  }

  export type TransportadoraUpdateToOneWithWhereWithoutRegistrosInput = {
    where?: TransportadoraWhereInput
    data: XOR<TransportadoraUpdateWithoutRegistrosInput, TransportadoraUncheckedUpdateWithoutRegistrosInput>
  }

  export type TransportadoraUpdateWithoutRegistrosInput = {
    razaoSocial?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    quimicosControlados?: BoolFieldUpdateOperationsInput | boolean
    disponivelParaFrete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransportadoraUncheckedUpdateWithoutRegistrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    razaoSocial?: StringFieldUpdateOperationsInput | string
    cnpj?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    quimicosControlados?: BoolFieldUpdateOperationsInput | boolean
    disponivelParaFrete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoUpsertWithoutRegistrosInput = {
    update: XOR<DocumentoUpdateWithoutRegistrosInput, DocumentoUncheckedUpdateWithoutRegistrosInput>
    create: XOR<DocumentoCreateWithoutRegistrosInput, DocumentoUncheckedCreateWithoutRegistrosInput>
    where?: DocumentoWhereInput
  }

  export type DocumentoUpdateToOneWithWhereWithoutRegistrosInput = {
    where?: DocumentoWhereInput
    data: XOR<DocumentoUpdateWithoutRegistrosInput, DocumentoUncheckedUpdateWithoutRegistrosInput>
  }

  export type DocumentoUpdateWithoutRegistrosInput = {
    codigo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    obgQuimicos?: BoolFieldUpdateOperationsInput | boolean
    obgNaoQuimicos?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DocumentoUncheckedUpdateWithoutRegistrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    codigo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    obgQuimicos?: BoolFieldUpdateOperationsInput | boolean
    obgNaoQuimicos?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RegistroDocumentoCreateManyTransportadoraInput = {
    id?: number
    documentoId: number
    validade?: Date | string | null
    urlArquivo?: string | null
    createdAt?: Date | string
  }

  export type RegistroDocumentoUpdateWithoutTransportadoraInput = {
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urlArquivo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documento?: DocumentoUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroDocumentoUncheckedUpdateWithoutTransportadoraInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentoId?: IntFieldUpdateOperationsInput | number
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urlArquivo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroDocumentoUncheckedUpdateManyWithoutTransportadoraInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentoId?: IntFieldUpdateOperationsInput | number
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urlArquivo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroDocumentoCreateManyDocumentoInput = {
    id?: number
    transportadoraId: number
    validade?: Date | string | null
    urlArquivo?: string | null
    createdAt?: Date | string
  }

  export type RegistroDocumentoUpdateWithoutDocumentoInput = {
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urlArquivo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transportadora?: TransportadoraUpdateOneRequiredWithoutRegistrosNestedInput
  }

  export type RegistroDocumentoUncheckedUpdateWithoutDocumentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    transportadoraId?: IntFieldUpdateOperationsInput | number
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urlArquivo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistroDocumentoUncheckedUpdateManyWithoutDocumentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    transportadoraId?: IntFieldUpdateOperationsInput | number
    validade?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    urlArquivo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TransportadoraCountOutputTypeDefaultArgs instead
     */
    export type TransportadoraCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransportadoraCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentoCountOutputTypeDefaultArgs instead
     */
    export type DocumentoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransportadoraDefaultArgs instead
     */
    export type TransportadoraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransportadoraDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentoDefaultArgs instead
     */
    export type DocumentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegistroDocumentoDefaultArgs instead
     */
    export type RegistroDocumentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegistroDocumentoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}